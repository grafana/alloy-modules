/*
  Drop Levels
  This component is used to drop logs based on their log level.
  The following log levels are supported:
    - Trace
    - Debug
    - Info

  Annotations:
    logs.grafana.com/drop-trace: true
    logs.grafana.com/drop-debug: true
    logs.grafana.com/drop-info: true
*/
declare "drop_levels" {
  argument "forward_to" {
    comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
  }

  argument "annotation" {
    // Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    // k8s selectors do not support a logical OR, if multiple types of annotations are needed, This component should be invoked multiple times
    // i.e. metrics.grafana.com, then again for prometheus.io
    comment = "The annotation namespace to use (default: logs.grafana.com)"
    default = "logs.grafana.com"
    optional = true
  }

  argument "trace_value" {
    comment = "The regular expression to use to determine if trace logs should be dropped, if you want to drop trace by default without setting the annotations everywhere use '.*' or 'true|' (default: true)"
    default = "true"
    optional = true
  }

  argument "trace_level" {
    comment = "The regular expression to use to match trace logs level label value (default: (?i)(trace?|trc))"
    default = "(?i)(trace?|trc)"
    optional = true
  }

  argument "debug_value" {
    comment = "The regular expression to use to determine if debug logs should be dropped, if you want to drop debug by default without setting the annotations everywhere use '.*' or 'true|' (default: true)"
    default = "true"
    optional = true
  }

  argument "debug_level" {
    comment = "The regular expression to use to match debug logs level label value (default: (?i)(debug?|dbg))"
    default = "(?i)(debug?|dbg)"
    optional = true
  }

  argument "info_value" {
    comment = "The regular expression to use to determine if info logs should be dropped, if you want to drop info by default without setting the annotations everywhere use '.*' or 'true|' (default: true)"
    default = "true"
    optional = true
  }

  argument "info_level" {
    comment = "The regular expression to use to match info logs level label value (default: (?i)(info?))"
    default = "(?i)(info?)"
    optional = true
  }

  /*
    Hidden Arguments
    These arguments are used to set reusable variables to avoid repeating logic
  */
  argument "__sd_annotation" {
    optional = true
    comment = "The logic is used to transform the annotation argument into a valid label name by removing unsupported characters."
    default = replace(replace(replace(coalesce(argument.annotation.value, "logs.grafana.com"),".", "_"),"/", "_"),"-", "_")
  }

  export "annotation" {
    value = argument.annotation.value
  }

  export "receiver" {
    value = loki.process.drop_level.receiver
  }

  loki.process "drop_level" {
    forward_to = argument.forward_to.value

    // check logs.grafana.com/drop-trace annotation, if not set or set to true then drop
    // any log message with level=trace
    stage.match {
      pipeline_name = "pipeline for annotation ||" + argument.annotation.value + "/drop-trace: true"
      selector = "{" + argument.__sd_annotation.value + "_drop_trace=~\"" + argument.trace_value.value + "\"" + ",level=~\"" + argument.trace_level.value + "\"}"
      action = "drop"
      drop_counter_reason = "trace"
    }

    // check logs.grafana.com/drop-debug annotation, if not set or set to true then drop
    // any log message with level=debug
    stage.match {
      pipeline_name = "pipeline for annotation ||" + argument.annotation.value + "/drop-debug: true"
      selector = "{" + argument.__sd_annotation.value + "_drop_debug=~\"" + argument.debug_value.value + "\"" + ",level=~\"" + argument.debug_level.value + "\"}"
      action = "drop"
      drop_counter_reason = "debug"
    }

    // check logs.grafana.com/drop-info annotation, if not set or set to true then drop
    // any log message with level=info
    stage.match {
      pipeline_name = "pipeline for annotation ||" + argument.annotation.value + "/drop-info: true"
      selector = "{" + argument.__sd_annotation.value + "_drop_trace=~\"" + argument.info_value.value + "\"" + ",level=~\"" + argument.info_level.value + "\"}"
      action = "drop"
      drop_counter_reason = "info"
    }

  }
}
