/*
  JSON Scrub Empties
  This component is used to scrub empty values from JSON logs.

  Annotations:
    logs.grafana.com/scrub-empties: true
*/
declare "json_scrub_empties" {
  argument "forward_to" {
    comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
  }

  argument "annotation" {
    // Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    // k8s selectors do not support a logical OR, if multiple types of annotations are needed, This component should be invoked multiple times
    // i.e. metrics.grafana.com, then again for prometheus.io
    comment = "The annotation namespace to use (default: logs.grafana.com)"
    default = "logs.grafana.com"
    optional = true
  }

  argument "scrub_empties_value" {
    comment = "The regular expression to use to determine if logs should have json empties scrubbed, if you want to scrub empties by default without setting the annotations everywhere use '.*' or 'true|' (default: true)"
    default = "(?i)true"
    optional = true
  }

  /*
    Hidden Arguments
    These arguments are used to set reusable variables to avoid repeating logic
  */
  argument "__sd_annotation" {
    optional = true
    comment = "The logic is used to transform the annotation argument into a valid label name by removing unsupported characters."
    default = replace(replace(replace(coalesce(argument.annotation.value, "logs.grafana.com"),".", "_"),"/", "_"),"-", "_")
  }

  export "annotation" {
    value = argument.annotation.value
  }

  export "receiver" {
    value = loki.process.json_scrub_empties.receiver
  }

  loki.process "json_scrub_empties" {
    forward_to = argument.forward_to.value

    // check logs.grafana.com/scrub-empties annotation, if true remove any json property whose value is set to
    // an empty string "", empty object {} or empty array [] is removed
    // this can reduce the overall # of bytes sent and stored in Loki
    stage.match {
      pipeline_name = "pipeline for annotation || " + argument.annotation.value + "/scrub-empties: true"
      selector = "{" + argument.__sd_annotation.value + "_scrub_empties=~\"" + argument.scrub_empties_value.value + "\"} |~ \"^\\s*{(.|\n)+}\\s*$\""

      // remove null properties
      stage.replace {
        // unescaped regex: (\s*,\s*("[^"]+"\s*:\s*(\[\s*\]|\{\s*\}|"\s*"))|("[^"]+"\s*:\s*(\[\s*\]|\{\s*\}|"\s*"))\s*,\s*)
        expression = "(\\s*,\\s*(\"[^\"]+\"\\s*:\\s*(\\[\\s*\\]|\\{\\s*\\}|\"\\s*\"))|(\"[^\"]+\"\\s*:\\s*(\\[\\s*\\]|\\{\\s*\\}|\"\\s*\"))\\s*,\\s*)"
        replace = ""
      }
    }

  }
}

/*
  JSON Scrub Nulls
  This component is used to scrub nulls from JSON logs.

  Annotations:
    logs.grafana.com/scrub-nulls: true

*/
declare "json_scrub_nulls" {
  argument "forward_to" {
    comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
  }

  argument "annotation" {
    // Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    // k8s selectors do not support a logical OR, if multiple types of annotations are needed, This component should be invoked multiple times
    // i.e. metrics.grafana.com, then again for prometheus.io
    comment = "The annotation namespace to use (default: logs.grafana.com)"
    default = "logs.grafana.com"
    optional = true
  }

  argument "scrub_nulls_value" {
    comment = "The regular expression to use to determine if logs should have json nulls scrubbed, if you want to scrub nulls by default without setting the annotations everywhere use '.*' or 'true|' (default: true)"
    default = "(?i)true"
    optional = true
  }

  /*
    Hidden Arguments
    These arguments are used to set reusable variables to avoid repeating logic
  */
  argument "__sd_annotation" {
    optional = true
    comment = "The logic is used to transform the annotation argument into a valid label name by removing unsupported characters."
    default = replace(replace(replace(coalesce(argument.annotation.value, "logs.grafana.com"),".", "_"),"/", "_"),"-", "_")
  }

  export "annotation" {
    value = argument.annotation.value
  }

  export "receiver" {
    value = loki.process.json_scrub_empties.receiver
  }

  loki.process "json_scrub_nulls" {
    forward_to = argument.forward_to.value

    // check logs.grafana.com/scrub-empties annotation, if true remove any json property whose value is set to
    // an empty string "", empty object {} or empty array [] is removed
    // this can reduce the overall # of bytes sent and stored in Loki
    stage.match {
      pipeline_name = "pipeline for annotation || " + argument.annotation.value + "/scrub-nulls: true"
      selector = "{" + argument.__sd_annotation.value + "_scrub_nulls=~\"" + argument.scrub_nulls_value.value + "\"} |~ \"^\\s*{(.|\n)+}\\s*$\""

      // remove null properties
      stage.replace {
        // unescaped regex: (\s*,\s*("[^"]+"\s*:\s*null)|("[^"]+"\s*:\s*null)\s*,\s*)
        expression = "(\\s*,\\s*(\"[^\"]+\"\\s*:\\s*null)|(\"[^\"]+\"\\s*:\\s*null)\\s*,\\s*)"
        replace = ""
      }
    }

  }
}
