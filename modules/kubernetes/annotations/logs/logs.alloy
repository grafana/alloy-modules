/*
  Pods component to find eligible log targets

  Annotations:
    logs.grafana.com/ingest: true
    logs.grafana.com/tenant: "primary"
*/
declare "pods" {
  // arguments for kubernetes discovery
  argument "namespaces" {
    comment = "The namespaces to look for targets in (default: [\"kube-system\"] is all namespaces)"
    optional = true
  }

  argument "field_selectors" {
    // Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    comment = "The label selectors to use to find matching targets (default: [])"
    optional = true
  }

  argument "label_selectors" {
    // Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    comment = "The label selectors to use to find matching targets (default: [\"k8s-app=konnectivity-agent\"])"
    optional = true
  }

  argument "annotation" {
    // Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    // k8s selectors do not support a logical OR, if multiple types of annotations are needed, this module should be invoked multiple times
    // i.e. metrics.grafana.com, then again for prometheus.io
    comment = "The annotation namespace to use (default: metrics.grafana.com)"
    default = "logs.grafana.com"
    optional = true
  }

  argument "tenant" {
    comment = "The tenant to write metrics to.  This does not have to be the tenantId, this is the value to look for in the logs.agent.grafana.com/tenant annotation, and this can be a regex."
    optional = true
    default = ".*"
  }

  /*
    Hidden Arguments
    These arguments are used to set reusable variables to avoid repeating logic
  */
  argument "__sd_annotation" {
    optional = true
    comment = "The logic is used to transform the annotation argument into a valid label name by removing unsupported characters."
    default = replace(replace(replace(coalesce(argument.annotation.value, "logs.grafana.com"),".", "_"),"/", "_"),"-", "_")
  }

  // export the discovered targets
  export "output" {
    value = discovery.relabel.log_annotations.output
  }

  // export the annotation argument
  export "annotation" {
    value = coalesce(argument.annotation.value, "logs.grafana.com")
  }

  // find all pods
  discovery.kubernetes "log_annotations" {
    role = "pod"

    selectors {
      role = "pod"
      field = join(coalesce(argument.field_selectors.value, []), ",")
      label = join(coalesce(argument.label_selectors.value, []), ",")
    }

    namespaces {
      names = coalesce(argument.namespaces.value, [])
    }
  }

  // apply relabelings
  discovery.relabel "log_annotations" {
    targets = discovery.kubernetes.log_annotations.targets

    // allow pods to declare their logs to be ingested or not, the default is true
    //   i.e. logs.grafana.com/ingest: false
    rule {
      action = "keep"
      source_labels = [
        "__meta_kubernetes_pod_annotation_" + argument.__sd_annotation.value + "_ingest",
      ]
      regex = "^(true|)$"
    }

    // allow pods to declare what tenant their logs should be written to, the following annotation is supported:
    //   logs.grafana.com/tenant: "primary"
    rule {
      action = "keep"
      source_labels = [
        "__meta_kubernetes_pod_annotation_" + argument.__sd_annotation.value + "_ingest",
      ]
      regex = "^(" + argument.tenant.value + ")$"
    }

    // set the instance label as the name of the worker node the pod is on
    rule {
      action = "replace"
      source_labels = ["__meta_kubernetes_pod_node_name"]
      target_label = "instance"
    }

    // set the namespace label
    rule {
      source_labels = ["__meta_kubernetes_namespace"]
      target_label  = "namespace"
    }

    // set the pod label
    rule {
      source_labels = ["__meta_kubernetes_pod_name"]
      target_label  = "pod"
    }

    // set the container label
    rule {
      source_labels = ["__meta_kubernetes_pod_container_name"]
      target_label  = "container"
    }

    // set a workload label
    rule {
      source_labels = [
        "__meta_kubernetes_pod_controller_kind",
        "__meta_kubernetes_pod_controller_name",
      ]
      separator = "/"
      target_label  = "workload"
    }
    // remove the hash from the ReplicaSet
    rule {
      source_labels = ["workload"]
      regex = "(ReplicaSet/.+)-.+"
      target_label  = "workload"
    }

    // set the app name if specified as metadata labels "app:" or "app.kubernetes.io/name:" or "k8s-app:"
    rule {
      action = "replace"
      source_labels = [
        "__meta_kubernetes_pod_label_app_kubernetes_io_name",
        "__meta_kubernetes_pod_label_k8s_app",
        "__meta_kubernetes_pod_label_app",
      ]
      separator = ";"
      regex = "^(?:;*)?([^;]+).*$"
      replacement = "$1"
      target_label = "app"
    }

    // set the component if specified as metadata labels "component:" or "app.kubernetes.io/component:" or "k8s-component:"
    rule {
      action = "replace"
      source_labels = [
        "__meta_kubernetes_pod_label_app_kubernetes_io_component",
        "__meta_kubernetes_pod_label_k8s_component",
        "__meta_kubernetes_pod_label_component",
      ]
      regex = "^(?:;*)?([^;]+).*$"
      replacement = "$1"
      target_label = "component"
    }

    // set the version if specified as metadata labels "version:" or "app.kubernetes.io/version:" or "app_version:"
    rule {
      action = "replace"
      source_labels = [
        "__meta_kubernetes_pod_label_app_kubernetes_io_version",
        "__meta_kubernetes_pod_label_version",
        "__meta_kubernetes_pod_label_app_version",
      ]
      regex = "^(?:;*)?([^;]+).*$"
      replacement = "$1"
      target_label = "version"
    }

    // set a source label
    rule {
      action = "replace"
      replacement = "kubernetes"
      target_label = "source"
    }

    // set the job label to be namespace / friendly pod name
    rule {
      action = "replace"
      source_labels = [
        "workload",
        "__meta_kubernetes_namespace",
      ]
      regex = ".+\\/(.+);(.+)"
      replacement = "$2/$1"
      target_label = "job"
    }
  }

}
