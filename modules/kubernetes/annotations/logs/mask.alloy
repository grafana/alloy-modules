/*
  Luhn Masking
  https://en.wikipedia.org/wiki/Luhn_algorithm
  Annotation: logs.grafana.com/mask-luhn: true
*/
declare "mask_luhn" {
  argument "forward_to" {
    comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
  }

  argument "annotation" {
    // Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    // k8s selectors do not support a logical OR, if multiple types of annotations are needed, This component should be invoked multiple times
    // i.e. metrics.grafana.com, then again for prometheus.io
    comment = "The annotation namespace to use (default: logs.grafana.com)"
    default = "logs.grafana.com"
    optional = true
  }

  argument "mask_luhn_value" {
    comment = "The regular expression to use to determine if logs should have luhn values masked, if you want to mask luhn by default without setting the annotations everywhere use '.*' or 'true|' (default: true)"
    default = "(?i)true"
    optional = true
  }

  argument "min_length" {
    comment = "The minimum length of a Luhn match to mask (default: 13)"
    default = 13
    optional = true
  }

  argument "replace_text" {
    comment = "The replacement text to use to for Luhn matches (default: **LUHN*REDACTED**)"
    default = "**LUHN*REDACTED**"
    optional = true
  }

  /*
    Hidden Arguments
    These arguments are used to set reusable variables to avoid repeating logic
  */
  argument "__sd_annotation" {
    optional = true
    comment = "The logic is used to transform the annotation argument into a valid label name by removing unsupported characters."
    default = replace(replace(replace(coalesce(argument.annotation.value, "logs.grafana.com"),".", "_"),"/", "_"),"-", "_")
  }

  export "annotation" {
    value = argument.annotation.value
  }

  export "receiver" {
    value = loki.process.mask_luhn.receiver
  }

  loki.process "mask_luhn" {
    forward_to = argument.forward_to.value

    // check logs.grafana.com/mask-luhn annotation, if true the data will be masked as **LUHN*REDACTED**
    stage.match {
      pipeline_name = "pipeline for annotation || " + argument.annotation.value + "/mask-luhn: true"
      selector = "{" + argument.__sd_annotation.value + "_mask_luhn=~\"" + argument.mask_luhn_value.value + "\"}"

      stage.luhn {
        min_length = argument.min_length.value
        replacement = argument.replace_text.value
      }
    }
  }
}

/*
  Credit Card Masking
  Annotation: logs.grafana.com/mask-credit-card: true
*/
declare "mask_credit_card" {
  argument "forward_to" {
    comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
  }

  argument "annotation" {
    // Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    // k8s selectors do not support a logical OR, if multiple types of annotations are needed, This component should be invoked multiple times
    // i.e. metrics.grafana.com, then again for prometheus.io
    comment = "The annotation namespace to use (default: logs.grafana.com)"
    default = "logs.grafana.com"
    optional = true
  }

  argument "mask_credit_card_value" {
    comment = "The regular expression to use to determine if logs should have credit card values masked, if you want to mask credit cards by default without setting the annotations everywhere use '.*' or 'true|' (default: true)"
    default = "(?i)true"
    optional = true
  }

  argument "replace_text" {
    comment = "The replacement text to use to for Credit Card matches (default: **CC*REDACTED**)"
    default = "**CC*REDACTED**"
    optional = true
  }

  /*
    Hidden Arguments
    These arguments are used to set reusable variables to avoid repeating logic
  */
  argument "__sd_annotation" {
    optional = true
    comment = "The logic is used to transform the annotation argument into a valid label name by removing unsupported characters."
    default = replace(replace(replace(coalesce(argument.annotation.value, "logs.grafana.com"),".", "_"),"/", "_"),"-", "_")
  }

  export "annotation" {
    value = argument.annotation.value
  }

  export "receiver" {
    value = loki.process.mask_credit_card.receiver
  }

  loki.process "mask_credit_card" {
    forward_to = argument.forward_to.value

    // check logs.grafana.com/mask-credit-card annotation, if true the data will be masked as **CC*REDACTED**
    // Formats:
    //   Visa: 4[0-9]{15}
    //   MasterCard: 5[1-5][0-9]{14}
    //   American Express: 3[47][0-9]{13}
    //   Discover: 6[0-9]{15}
    //   JCB: 3[51-55][0-9]{14}
    stage.match {
      pipeline_name = "pipeline for annotation || " + argument.annotation.value + "/mask-credit-card: true"
      selector = "{" + argument.__sd_annotation.value + "_mask_credit_card=~\"" + argument.mask_credit_card_value.value + "\"}"

      stage.replace {
        // unescaped regex: (4[0-9]{15}|5[1-5][0-9]{14}|3[47][0-9]{13}|6[0-9]{15}|3[51-55][0-9]{14})
        expression = "(4[0-9]{15}|5[1-5][0-9]{14}|3[47][0-9]{13}|6[0-9]{15}|3[51-55][0-9]{14})"
        replace = argument.replace_text.value
      }
    }
  }
}

/*
  Email Masking
  Annotation: logs.grafana.com/mask-email: true
*/
declare "mask_email" {
  argument "forward_to" {
    comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
  }

  argument "annotation" {
    // Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    // k8s selectors do not support a logical OR, if multiple types of annotations are needed, This component should be invoked multiple times
    // i.e. metrics.grafana.com, then again for prometheus.io
    comment = "The annotation namespace to use (default: logs.grafana.com)"
    default = "logs.grafana.com"
    optional = true
  }

  argument "mask_email_value" {
    comment = "The regular expression to use to determine if logs should have emails masked, if you want to mask emails by default without setting the annotations everywhere use '.*' or 'true|' (default: true)"
    default = "(?i)true"
    optional = true
  }

  argument "replace_text" {
    comment = "The replacement text to use to for Email matches (default: **EMAIL*REDACTED**)"
    default = "**EMAIL*REDACTED**"
    optional = true
  }

  /*
    Hidden Arguments
    These arguments are used to set reusable variables to avoid repeating logic
  */
  argument "__sd_annotation" {
    optional = true
    comment = "The logic is used to transform the annotation argument into a valid label name by removing unsupported characters."
    default = replace(replace(replace(coalesce(argument.annotation.value, "logs.grafana.com"),".", "_"),"/", "_"),"-", "_")
  }

  export "annotation" {
    value = argument.annotation.value
  }

  export "receiver" {
    value = loki.process.mask_email.receiver
  }

  loki.process "mask_email" {
    forward_to = argument.forward_to.value

    // check logs.grafana.com/mask-email annotation, if true the data will be masked as **EMAIL*REDACTED**
    stage.match {
      pipeline_name = "pipeline for annotation || " + argument.annotation.value + "/mask-email: true"
      selector = "{" + argument.__sd_annotation.value + "_mask_email=~\"" + argument.mask_email_value.value + "\"}"

      stage.replace {
        // unescaped regex: ([\w\.=-]+@[\w\.-]+\.[\w]{2,64})
        expression = "([\\w\\.=-]+@[\\w\\.-]+\\.[\\w]{2,64})"
        replace = argument.replace_text.value
      }
    }
  }
}

/*
  IPv4 Masking
  Annotation: logs.grafana.com/mask-ipv4: true
*/
declare "mask_ipv4" {
  argument "forward_to" {
    comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
  }

  argument "annotation" {
    // Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    // k8s selectors do not support a logical OR, if multiple types of annotations are needed, This component should be invoked multiple times
    // i.e. metrics.grafana.com, then again for prometheus.io
    comment = "The annotation namespace to use (default: logs.grafana.com)"
    default = "logs.grafana.com"
    optional = true
  }

  argument "mask_ipv4_value" {
    comment = "The regular expression to use to determine if logs should have IPv4 values masked, if you want to mask IPv4 values by default without setting the annotations everywhere use '.*' or 'true|' (default: true)"
    default = "(?i)true"
    optional = true
  }

  argument "replace_text" {
    comment = "The replacement text to use to for IPv4 matches (default: **IPv4*REDACTED**)"
    default = "**IPv4*REDACTED**"
    optional = true
  }

  /*
    Hidden Arguments
    These arguments are used to set reusable variables to avoid repeating logic
  */
  argument "__sd_annotation" {
    optional = true
    comment = "The logic is used to transform the annotation argument into a valid label name by removing unsupported characters."
    default = replace(replace(replace(coalesce(argument.annotation.value, "logs.grafana.com"),".", "_"),"/", "_"),"-", "_")
  }

  export "annotation" {
    value = argument.annotation.value
  }

  export "receiver" {
    value = loki.process.mask_ipv4.receiver
  }

  loki.process "mask_ipv4" {
    forward_to = argument.forward_to.value

    // check logs.grafana.com/mask-ipv4 annotation, if true the data will be masked as **IPV4*REDACTED**
    stage.match {
      pipeline_name = "pipeline for annotation || " + argument.annotation.value + "/mask-ipv4: true"
      selector = "{" + argument.__sd_annotation.value + "_mask_ipv4=~\"" + argument.mask_ipv4_value.value + "\"}"

      stage.replace {
        // unescaped regex: ((\b25[0-5]|\b2[0-4][0-9]|\b[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})
        expression = "((\\b25[0-5]|\\b2[0-4][0-9]|\\b[01]?[0-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})"
        replace = argument.replace_text.value
      }
    }
  }
}

/*
  IPv6 Masking
  Annotation: logs.grafana.com/mask-ipv6: true
*/
declare "mask_ipv6" {
  argument "forward_to" {
    comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
  }

  argument "annotation" {
    // Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    // k8s selectors do not support a logical OR, if multiple types of annotations are needed, This component should be invoked multiple times
    // i.e. metrics.grafana.com, then again for prometheus.io
    comment = "The annotation namespace to use (default: logs.grafana.com)"
    default = "logs.grafana.com"
    optional = true
  }

  argument "mask_ipv4_value" {
    comment = "The regular expression to use to determine if logs should have IPv6 values masked, if you want to mask IPv6 values by default without setting the annotations everywhere use '.*' or 'true|' (default: true)"
    default = "(?i)true"
    optional = true
  }

  argument "replace_text" {
    comment = "The replacement text to use to for IPv6 matches (default: **IPV6*REDACTED**)"
    default = "**IPV6*REDACTED**"
    optional = true
  }

  /*
    Hidden Arguments
    These arguments are used to set reusable variables to avoid repeating logic
  */
  argument "__sd_annotation" {
    optional = true
    comment = "The logic is used to transform the annotation argument into a valid label name by removing unsupported characters."
    default = replace(replace(replace(coalesce(argument.annotation.value, "logs.grafana.com"),".", "_"),"/", "_"),"-", "_")
  }

  export "annotation" {
    value = argument.annotation.value
  }

  export "receiver" {
    value = loki.process.mask_ipv6.receiver
  }

  loki.process "mask_ipv6" {
    forward_to = argument.forward_to.value

    // check logs.grafana.com/mask-ipv6 annotation, if true the data will be masked as **IPV6*REDACTED**
    stage.match {
      pipeline_name = "pipeline for annotation || " + argument.annotation.value + "/mask-ipv6: true"
      selector = "{" + argument.__sd_annotation.value + "_mask_ipv6=~\"" + argument.mask_ipv6_value.value + "\"}"

      stage.replace {
        // unescaped regex: (([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))
        expression = "(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))"
        replace = argument.replace_text.value
      }
    }
  }
}

/*
  Phone Masking
  Annotation: logs.grafana.com/mask-phone: true
*/
declare "mask_phone" {
  argument "forward_to" {
    comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
  }

  argument "annotation" {
    // Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    // k8s selectors do not support a logical OR, if multiple types of annotations are needed, This component should be invoked multiple times
    // i.e. metrics.grafana.com, then again for prometheus.io
    comment = "The annotation namespace to use (default: logs.grafana.com)"
    default = "logs.grafana.com"
    optional = true
  }

  argument "mask_phone_value" {
    comment = "The regular expression to use to determine if logs should have phone numbers masked, if you want to mask phone numbers by default without setting the annotations everywhere use '.*' or 'true|' (default: true)"
    default = "(?i)true"
    optional = true
  }

  argument "replace_text" {
    comment = "The replacement text to use to for Text matches (default: **PHONE*REDACTED**)"
    default = "**PHONE*REDACTED**"
    optional = true
  }

  /*
    Hidden Arguments
    These arguments are used to set reusable variables to avoid repeating logic
  */
  argument "__sd_annotation" {
    optional = true
    comment = "The logic is used to transform the annotation argument into a valid label name by removing unsupported characters."
    default = replace(replace(replace(coalesce(argument.annotation.value, "logs.grafana.com"),".", "_"),"/", "_"),"-", "_")
  }

  export "annotation" {
    value = argument.annotation.value
  }

  export "receiver" {
    value = loki.process.mask_phone.receiver
  }

  loki.process "mask_phone" {
    forward_to = argument.forward_to.value

    // check logs.grafana.com/mask-phone annotation, if true the data will be masked as **PHONE*REDACTED**
    stage.match {
      pipeline_name = "pipeline for annotation || " + argument.annotation.value + "/mask-phone: true"
      selector = "{" + argument.__sd_annotation.value + "_mask_phone=~\"" + argument.mask_phone_value.value + "\"}"

      stage.replace {
        // unescaped regex: ([\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6})
        expression = "([\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6})"
        replace = argument.replace_text.value
      }
    }
  }
}

/*
  SSN Masking
  Annotation: logs.grafana.com/mask-ssn: true
*/
declare "mask_ssn" {
  argument "forward_to" {
    comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
  }

  argument "annotation" {
    // Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    // k8s selectors do not support a logical OR, if multiple types of annotations are needed, This component should be invoked multiple times
    // i.e. metrics.grafana.com, then again for prometheus.io
    comment = "The annotation namespace to use (default: logs.grafana.com)"
    default = "logs.grafana.com"
    optional = true
  }

  argument "mask_ssn_value" {
    comment = "The regular expression to use to determine if logs should have SSNs masked, if you want to mask SSNs by default without setting the annotations everywhere use '.*' or 'true|' (default: true)"
    default = "(?i)true"
    optional = true
  }

  argument "replace_text" {
    comment = "The replacement text to use to for SSN matches (default: **SSN*REDACTED**)"
    default = "**SSN*REDACTED**"
    optional = true
  }

  /*
    Hidden Arguments
    These arguments are used to set reusable variables to avoid repeating logic
  */
  argument "__sd_annotation" {
    optional = true
    comment = "The logic is used to transform the annotation argument into a valid label name by removing unsupported characters."
    default = replace(replace(replace(coalesce(argument.annotation.value, "logs.grafana.com"),".", "_"),"/", "_"),"-", "_")
  }

  export "annotation" {
    value = argument.annotation.value
  }

  export "receiver" {
    value = loki.process.mask_ssn.receiver
  }

  loki.process "mask_ssn" {
    forward_to = argument.forward_to.value

    // check logs.grafana.com/mask-ssn annotation, if true the data will be masked as **SSN*REDACTED**
    stage.match {
      pipeline_name = "pipeline for annotation || " + argument.annotation.value + "/mask-ssn: true"
      selector = "{" + argument.__sd_annotation.value + "_mask_ssn=~\"" + argument.mask_phone_value.value + "\"}"

      stage.replace {
        // unescaped regex: ([0-9]{3}-[0-9]{2}-[0-9]{4})
        expression = "([0-9]{3}-[0-9]{2}-[0-9]{4})"
        replace = argument.replace_text.value
      }
    }
  }
}
