/*
  Embed Pod
  This component is used to embed the pod name into the log message.
  This can be useful for debugging purposes, but it should not be a label in Loki due to the high cardinality it would create.

  Annotations:
    logs.grafana.com/embed-pod: true
*/
declare "embed_pod" {
  argument "forward_to" {
    comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
  }

  argument "annotation" {
    // Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    // k8s selectors do not support a logical OR, if multiple types of annotations are needed, This component should be invoked multiple times
    // i.e. metrics.grafana.com, then again for prometheus.io
    comment = "The annotation namespace to use (default: logs.grafana.com)"
    default = "logs.grafana.com"
    optional = true
  }

  argument "embed_pod_value" {
    comment = "The regular expression to use to determine if pod should be embedded or not, if you want to embed the pod by default without setting the annotations everywhere use '.*' or 'true|' (default: true)"
    default = "true"
    optional = true
  }

  argument "embed_pod_key" {
    comment = "The key to use to embed the pod name into the log message (default: __pod)"
    default = "__pod"
    optional = true
  }

  /*
    Hidden Arguments
    These arguments are used to set reusable variables to avoid repeating logic
  */
  argument "__sd_annotation" {
    optional = true
    comment = "The logic is used to transform the annotation argument into a valid label name by removing unsupported characters."
    default = replace(replace(replace(coalesce(argument.annotation.value, "logs.grafana.com"),".", "_"),"/", "_"),"-", "_")
  }

  export "annotation" {
    value = argument.annotation.value
  }

  export "receiver" {
    value = loki.process.embed_pod.receiver
  }

  loki.process "embed_pod" {
    forward_to = argument.forward_to.value

    // check logs.grafana.com/embed-pod annotation, if true embed the name of the pod to the end of the log line
    // this can reduce the overall cardinality, by not using a label of "pod", individual pods can still be searched
    // using a line selector i.e. __pod=your-pod-name
    stage.match {
      selector = "{" + argument.__sd_annotation.value + "_embed_pod=~\"(?i)true\"}"
      pipeline_name = "pipeline for annotation || " + argument.annotation.value + "/embed-pod: true"

      // embed as json property
      stage.match {
        selector = "{" + argument.__sd_annotation.value + "_embed_pod=~\"(?i)true\"} |~ \"^\\s*{(.|\n)+}\\s*$\""
        // render a new label called log_line, and add the name of the pod to the end of the log message
        // knowing the pod name can be valuable for debugging, but it should not be a label in Loki due
        // to the high cardinality it would create.
        // note: .Entry is a special key that is used to reference the current line
        stage.replace {
          expression = "\\}$"
          replace = ""
        }
        stage.template {
          source = "log_line"
          template = "{{ .Entry }},\"" + argument.embed_pod_key.value + "\":\"{{ .pod }}\"}"
        }
      }

      // embed as text property
      stage.match {
        selector = "{" + argument.__sd_annotation.value + "_embed_pod=~\"(?i)true\"} !~ \"^\\s*{(.|\n)+}\\s*$\""
        // render a new label called log_line, and add the name of the pod to the end of the log message
        // knowing the pod name can be valuable for debugging, but it should not be a label in Loki due
        // to the high cardinality it would create.
        // note: .Entry is a special key that is used to reference the current line
        stage.template {
          source = "log_line"
          template = "{{ .Entry }} " + argument.embed_pod_key.value + "={{ .pod }}"
        }
      }

      // reset the output to the log_line
      stage.output {
        source = "log_line"
      }
    }
  }
}
