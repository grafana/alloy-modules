/*
  Decolorize
  This component is used to remove color codes from logs.

  Annotations:
    logs.grafana.com/decolorize: true
*/
declare "decolorize" {
  argument "forward_to" {
    comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
  }

  argument "annotation" {
    // Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    // k8s selectors do not support a logical OR, if multiple types of annotations are needed, This component should be invoked multiple times
    // i.e. metrics.grafana.com, then again for prometheus.io
    comment = "The annotation namespace to use (default: logs.grafana.com)"
    default = "logs.grafana.com"
    optional = true
  }

  argument "decolorize_value" {
    comment = "The regular expression to use to determine if logs should be decolorized, if you want to decolorize by default without setting the annotations everywhere use '.*' or 'true|' (default: true)"
    default = "(?i)true"
    optional = true
  }

  /*
    Hidden Arguments
    These arguments are used to set reusable variables to avoid repeating logic
  */
  argument "__sd_annotation" {
    optional = true
    comment = "The logic is used to transform the annotation argument into a valid label name by removing unsupported characters."
    default = replace(replace(replace(coalesce(argument.annotation.value, "logs.grafana.com"),".", "_"),"/", "_"),"-", "_")
  }

  export "annotation" {
    value = argument.annotation.value
  }

  export "receiver" {
    value = loki.process.decolorize.receiver
  }

  loki.process "decolorize" {
    forward_to = argument.forward_to.value

    // check logs.grafana.com/drop-trace annotation, if not set or set to true then drop
    // any log message with level=trace
    stage.match {
      selector = "{" + argument.__sd_annotation.value + "_decolorize=~\"" + argument.decolorize_value.value + "\"}"

      stage.decolorize {}
    }

  }
}

/*
  Trim
  This component is used to trim leading and trailing whitespace from log lines.

  Annotations:
    logs.grafana.com/trim: true
*/
declare "trim" {
  argument "forward_to" {
    comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
  }

  argument "annotation" {
    // Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    // k8s selectors do not support a logical OR, if multiple types of annotations are needed, This component should be invoked multiple times
    // i.e. metrics.grafana.com, then again for prometheus.io
    comment = "The annotation namespace to use (default: logs.grafana.com)"
    default = "logs.grafana.com"
    optional = true
  }

  argument "trim_value" {
    comment = "The regular expression to use to determine if whitespace should be embedded or not, if you want to embed the pod by default without setting the annotations everywhere use '.*' or 'true|' (default: true)"
    default = "true"
    optional = true
  }

  /*
    Hidden Arguments
    These arguments are used to set reusable variables to avoid repeating logic
  */
  argument "__sd_annotation" {
    optional = true
    comment = "The logic is used to transform the annotation argument into a valid label name by removing unsupported characters."
    default = replace(replace(replace(coalesce(argument.annotation.value, "logs.grafana.com"),".", "_"),"/", "_"),"-", "_")
  }

  export "annotation" {
    value = argument.annotation.value
  }

  export "receiver" {
    value = loki.process.trim.receiver
  }

  loki.process "trim" {
    forward_to = argument.forward_to.value

    // check logs.grafana.com/trim annotation, if true trim any leading/trailing whitespace log line
    stage.match {
      selector = "{" + argument.__sd_annotation.value + "_trim=~\"" + argument.trim_value.value + "\"}"
      pipeline_name = "pipeline for annotation || " + argument.annotation.value + "/trim: true"

      stage.template {
        source = "trimmed_line"
        template = "{{ Trim .Entry }}"
      }

      stage.output {
        source = "trimmed_line"
      }
    }
  }
}

/*
  Dedup Spaces
  This component is used to deduplicate spaces in log lines.

  Annotations:
    logs.grafana.com/dedup-spaces: true
*/
declare "dedup_spaces" {
  argument "forward_to" {
    comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
  }

  argument "annotation" {
    // Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    // k8s selectors do not support a logical OR, if multiple types of annotations are needed, This component should be invoked multiple times
    // i.e. metrics.grafana.com, then again for prometheus.io
    comment = "The annotation namespace to use (default: logs.grafana.com)"
    default = "logs.grafana.com"
    optional = true
  }

  argument "dedup_value" {
    comment = "The regular expression to use to determine if multiple spaces should be replaced with a single space or not, if you want to always dedup use '.*' or 'true|' (default: true)"
    default = "true"
    optional = true
  }

  /*
    Hidden Arguments
    These arguments are used to set reusable variables to avoid repeating logic
  */
  argument "__sd_annotation" {
    optional = true
    comment = "The logic is used to transform the annotation argument into a valid label name by removing unsupported characters."
    default = replace(replace(replace(coalesce(argument.annotation.value, "logs.grafana.com"),".", "_"),"/", "_"),"-", "_")
  }

  export "annotation" {
    value = argument.annotation.value
  }

  export "receiver" {
    value = loki.process.dedup_spaces.receiver
  }

  loki.process "dedup_spaces" {
    forward_to = argument.forward_to.value

    // check logs.grafana.com/trim annotation, if true trim any leading/trailing whitespace log line
    stage.match {
      selector = "{" + argument.__sd_annotation.value + "_dedup_spaces=~\"" + argument.dedup_value.value + "\"}"
      pipeline_name = "pipeline for annotation || " + argument.annotation.value + "/dedup-spaces: true"

      stage.replace {
        expression = "(\\s{2,})"
        replace    = " "
      }
    }
  }

}

/*
  Sampling
  This component is used to sample logs

  Annotations:
    logs.grafana.com/sampling: true
*/
declare "sampling" {
  argument "forward_to" {
    comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
  }

  argument "annotation" {
    // Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    // k8s selectors do not support a logical OR, if multiple types of annotations are needed, This component should be invoked multiple times
    // i.e. metrics.grafana.com, then again for prometheus.io
    comment = "The annotation namespace to use (default: logs.grafana.com)"
    default = "logs.grafana.com"
    optional = true
  }

  argument "sampling_value" {
    comment = "The regular expression to use to determine if the log should be sampled or not, if you want to sample the pod by default without setting the annotations everywhere use '.*' or 'true|' (default: true)"
    default = "true"
    optional = true
  }

  argument "sampling_rate" {
    comment = "The sampling rate in a range of [0, 1] (default: 0.25)"
    optional = true
    default = 0.25
  }

  argument "sampling_reason" {
    comment = "The sampling reason (default: annotation_sampling)"
    optional = true
    default = "annotation_sampling"
  }

  /*
    Hidden Arguments
    These arguments are used to set reusable variables to avoid repeating logic
  */
  argument "__sd_annotation" {
    optional = true
    comment = "The logic is used to transform the annotation argument into a valid label name by removing unsupported characters."
    default = replace(replace(replace(coalesce(argument.annotation.value, "logs.grafana.com"),".", "_"),"/", "_"),"-", "_")
  }

  export "annotation" {
    value = argument.annotation.value
  }

  export "receiver" {
    value = loki.process.sampling.receiver
  }

  loki.process "sampling" {
    forward_to = argument.forward_to.value

    // check logs.grafana.com/sampling annotation, if true the logs will be sampled at the specified rate
    stage.match {
      selector = "{" + argument.__sd_annotation.value + "_sampling=~\"" + argument.sampling_value.value + "\"}"
      pipeline_name = "pipeline for annotation || " + argument.annotation.value + "/sampling: true"

      stage.sampling {
        rate = argument.sampling_rate.value
        drop_counter_reason = argument.sampling_reason.value
      }
    }
  }

}
